C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED_I2C
OBJECT MODULE PLACED IN .\Objects\oled_i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE oled_i2c.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEFINE(FOSC_160000
                    -) DEBUG OBJECTEXTEND PRINT(.\Listings\oled_i2c.lst) TABS(2) OBJECT(.\Objects\oled_i2c.obj)

line level    source

   1          /***************************************************************************************************
   2                                             ExploreEmbedded Copyright Notice 
   3           ****************************************************************************************************
   4           * File:   oled_i2c.c
   5           * Version: 16.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: SSD1306 I2C OLED library to display strings, numbers, graphs and logos
   9          
  10          This code has been developed and tested on ExploreEmbedded boards.  
  11          We strongly believe that the library works on any of development boards for respective controllers. 
  12          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  13          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider 
  14          buying the ExploreEmbedded boards.
  15          
  16          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  17          See also: http://www.opensource.org/licenses/bsd-license.php
  18          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  19          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION 
  20          RELATED TO UPDATES.
  21          
  22          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  23          and without fee is hereby granted, provided that this copyright notices appear in all copies 
  24          and that both those copyright notices and this permission notice appear in supporting documentation.
  25           **************************************************************************************************/
  26          
  27           /* The orginal Arduino libaray from rinkyDink is modified for 0 end controllers with small RAM memory.
  28              ExploreEmbedded oled_i2c.c library does not have a RAM buffer and hence different fonts and graphics a
             -re not supported.
  29            You can download the arduino library from this link http://www.rinkydinkelectronics.com/library.php?id=79
             - .
  30              
  31            OLED_I2C.cpp - Arduino/chipKit library support for 128x64 pixel SSD1306 OLEDs
  32            Copyright (C)2015 Rinky-Dink Electronics, Henning Karlsen. All right reserved
  33            
  34            This library has been made to make it easy to use 128x64 pixel OLED displays
  35            based on the SSD1306 controller chip with an Arduino or a chipKit.
  36          
  37            You can always find the latest version of the library at 
  38            http://www.RinkyDinkElectronics.com/
  39          
  40            This library is free software; you can redistribute it and/or
  41            modify it under the terms of the CC BY-NC-SA 3.0 license.
  42            Please see the included documents for further information.
  43          
  44            Commercial use of this library requires you to buy a license that
  45            will allow commercial use. This includes using the library,
  46            modified or not, as a tool to sell products.
  47          
  48            The license applies to all part of the library including the 
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 2   

  49            examples and tools supplied with the library.
  50          */
  51          
  52          #include "oled_i2c.h"
  53          #include "N76E003.h"
  54          #include "SFR_Macro.h"
  55          #include "Function_define.h"
  56          #include "Common.h"
  57          #include "Delay.h"
  58          
  59          sbit SCL_PIN = P1^3;
  60          sbit SDA_PIN = P1^4;
  61          
  62          
  63          int OledLineNum,OledCursorPos;
  64          
  65          
  66          
  67          /***************************************************************************************************
  68                                            Local Function Declaration
  69           ***************************************************************************************************/
  70          void oledSendCommand(int cmd);
  71          void oledSendStart(int address);
  72          void oledSendStop(void);
  73          void oledWaitForAck(void);
  74          void oledSendByte(int ch);
  75          /**************************************************************************************************/
  76          
  77          
  78          #define FONT_SIZE 5
  79          code const OledFontTable[][FONT_SIZE]=
  80          {
  81                  0x00, 0x00, 0x00, 0x00, 0x00,   // space
  82                  0x00, 0x00, 0x2f, 0x00, 0x00,   // !
  83                  0x00, 0x07, 0x00, 0x07, 0x00,   // "
  84                  0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
  85                  0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
  86                  0x23, 0x13, 0x08, 0x64, 0x62,   // %
  87                  0x36, 0x49, 0x55, 0x22, 0x50,   // &
  88                  0x00, 0x05, 0x03, 0x00, 0x00,   // '
  89                  0x00, 0x1c, 0x22, 0x41, 0x00,   // (
  90                  0x00, 0x41, 0x22, 0x1c, 0x00,   // )
  91                  0x14, 0x08, 0x3E, 0x08, 0x14,   // *
  92                  0x08, 0x08, 0x3E, 0x08, 0x08,   // +
  93                  0x00, 0x00, 0xA0, 0x60, 0x00,   // ,
  94                  0x08, 0x08, 0x08, 0x08, 0x08,   // -
  95                  0x00, 0x60, 0x60, 0x00, 0x00,   // .
  96                  0x20, 0x10, 0x08, 0x04, 0x02,   // /
  97          
  98                  0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
  99                  0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
 100                  0x42, 0x61, 0x51, 0x49, 0x46,   // 2
 101                  0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
 102                  0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
 103                  0x27, 0x45, 0x45, 0x45, 0x39,   // 5
 104                  0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
 105                  0x01, 0x71, 0x09, 0x05, 0x03,   // 7
 106                  0x36, 0x49, 0x49, 0x49, 0x36,   // 8
 107                  0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
 108          
 109                  0x00, 0x36, 0x36, 0x00, 0x00,   // :
 110                  0x00, 0x56, 0x36, 0x00, 0x00,   // ;
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 3   

 111                  0x08, 0x14, 0x22, 0x41, 0x00,   // <
 112                  0x14, 0x14, 0x14, 0x14, 0x14,   // =
 113                  0x00, 0x41, 0x22, 0x14, 0x08,   // >
 114                  0x02, 0x01, 0x51, 0x09, 0x06,   // ?
 115                  0x32, 0x49, 0x59, 0x51, 0x3E,   // @
 116          
 117                  0x7C, 0x12, 0x11, 0x12, 0x7C,   // A
 118                  0x7F, 0x49, 0x49, 0x49, 0x36,   // B
 119                  0x3E, 0x41, 0x41, 0x41, 0x22,   // C
 120                  0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
 121                  0x7F, 0x49, 0x49, 0x49, 0x41,   // E
 122                  0x7F, 0x09, 0x09, 0x09, 0x01,   // F
 123                  0x3E, 0x41, 0x49, 0x49, 0x7A,   // G
 124                  0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
 125                  0x00, 0x41, 0x7F, 0x41, 0x00,   // I
 126                  0x20, 0x40, 0x41, 0x3F, 0x01,   // J
 127                  0x7F, 0x08, 0x14, 0x22, 0x41,   // K
 128                  0x7F, 0x40, 0x40, 0x40, 0x40,   // L
 129                  0x7F, 0x02, 0x0C, 0x02, 0x7F,   // M
 130                  0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
 131                  0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
 132                  0x7F, 0x09, 0x09, 0x09, 0x06,   // P
 133                  0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
 134                  0x7F, 0x09, 0x19, 0x29, 0x46,   // R
 135                  0x46, 0x49, 0x49, 0x49, 0x31,   // S
 136                  0x01, 0x01, 0x7F, 0x01, 0x01,   // T
 137                  0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
 138                  0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
 139                  0x3F, 0x40, 0x38, 0x40, 0x3F,   // W
 140                  0x63, 0x14, 0x08, 0x14, 0x63,   // X
 141                  0x07, 0x08, 0x70, 0x08, 0x07,   // Y
 142                  0x61, 0x51, 0x49, 0x45, 0x43,   // Z
 143          
 144                  0x00, 0x7F, 0x41, 0x41, 0x00,   // [
 145                  0x55, 0xAA, 0x55, 0xAA, 0x55,   // Backslash (Checker pattern)
 146                  0x00, 0x41, 0x41, 0x7F, 0x00,   // ]
 147                  0x04, 0x02, 0x01, 0x02, 0x04,   // ^
 148                  0x40, 0x40, 0x40, 0x40, 0x40,   // _
 149                  0x00, 0x03, 0x05, 0x00, 0x00,   // `
 150          
 151                  0x20, 0x54, 0x54, 0x54, 0x78,   // a
 152                  0x7F, 0x48, 0x44, 0x44, 0x38,   // b
 153                  0x38, 0x44, 0x44, 0x44, 0x20,   // c
 154                  0x38, 0x44, 0x44, 0x48, 0x7F,   // d
 155                  0x38, 0x54, 0x54, 0x54, 0x18,   // e
 156                  0x08, 0x7E, 0x09, 0x01, 0x02,   // f
 157                  0x18, 0xA4, 0xA4, 0xA4, 0x7C,   // g
 158                  0x7F, 0x08, 0x04, 0x04, 0x78,   // h
 159                  0x00, 0x44, 0x7D, 0x40, 0x00,   // i
 160                  0x40, 0x80, 0x84, 0x7D, 0x00,   // j
 161                  0x7F, 0x10, 0x28, 0x44, 0x00,   // k
 162                  0x00, 0x41, 0x7F, 0x40, 0x00,   // l
 163                  0x7C, 0x04, 0x18, 0x04, 0x78,   // m
 164                  0x7C, 0x08, 0x04, 0x04, 0x78,   // n
 165                  0x38, 0x44, 0x44, 0x44, 0x38,   // o
 166                  0xFC, 0x24, 0x24, 0x24, 0x18,   // p
 167                  0x18, 0x24, 0x24, 0x18, 0xFC,   // q
 168                  0x7C, 0x08, 0x04, 0x04, 0x08,   // r
 169                  0x48, 0x54, 0x54, 0x54, 0x20,   // s
 170                  0x04, 0x3F, 0x44, 0x40, 0x20,   // t
 171                  0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
 172                  0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 4   

 173                  0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
 174                  0x44, 0x28, 0x10, 0x28, 0x44,   // x
 175                  0x1C, 0xA0, 0xA0, 0xA0, 0x7C,   // y
 176                  0x44, 0x64, 0x54, 0x4C, 0x44,   // z
 177          
 178                  0x00, 0x10, 0x7C, 0x82, 0x00,   // {
 179                  0x00, 0x00, 0xFF, 0x00, 0x00,   // |
 180                  0x00, 0x82, 0x7C, 0x10, 0x00,   // }
 181                  0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
 182          };
 183          
 184          
 185          
 186          /**************************************************************************************************
 187                                          void OLED_Init()
 188           ***************************************************************************************************
 189           * I/P Arguments:  none
 190           * Return value : none
 191          
 192           * description  :This function is used to initialize the OLED in the normal mode.
 193                          After initializing the OLED, It clears the OLED and sets the cursor to first line first po
             -sition. .
 194          
 195           **************************************************************************************************/
 196          void OLED_Init(void)
 197          { 
 198   1          oledSendCommand(SSD1306_DISPLAY_OFF);
 199   1          oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 200   1          oledSendCommand(0x80);
 201   1          oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 202   1          oledSendCommand(0x3F);
 203   1          oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 204   1          oledSendCommand(0x0);
 205   1          oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 206   1          oledSendCommand(SSD1306_CHARGE_PUMP);
 207   1          oledSendCommand(0x14);
 208   1          oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 209   1          oledSendCommand(0x00);
 210   1          oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 211   1          oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 212   1          oledSendCommand(SSD1306_SET_COM_PINS);
 213   1          oledSendCommand(0x12);
 214   1          oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 215   1          oledSendCommand(0xCF);
 216   1          oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 217   1          oledSendCommand(0xF1);
 218   1          oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 219   1          oledSendCommand(0x40);
 220   1          oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 221   1          oledSendCommand(SSD1306_NORMAL_DISPLAY);
 222   1          oledSendCommand(SSD1306_DISPLAY_ON);
 223   1      
 224   1          OLED_Clear();  /* Clear the complete LCD during init */
 225   1      }
 226          
 227          
 228          
 229          
 230          
 231          /***************************************************************************************************
 232                                 void OLED_DisplayChar( char ch)
 233           ****************************************************************************************************
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 5   

 234           * I/P Arguments: ASCII value of the char to be displayed.
 235           * Return value    : none
 236          
 237           * description  : This function sends a character to be displayed on LCD.
 238                            Any valid ascii value can be passed to display respective character
 239          
 240           ****************************************************************************************************/
 241          void OLED_DisplayChar(char ch)
 242          {
 243   1          int dat,i=0;
 244   1      
 245   1          if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 246   1          {
 247   2              /* If the cursor has reached to end of line on page1
 248   2              OR NewLine command is issued Then Move the cursor to next line */
 249   2              OLED_GoToNextLine();
 250   2          }
 251   1          if(ch!='\n') /* TODO */
 252   1          {
 253   2              ch = ch-0x20; // As the lookup table starts from Space(0x20)
 254   2      
 255   2              while(1)
 256   2              {
 257   3                  dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
 258   3      
 259   3      
 260   3                  oledSendByte(dat); /* Display the data and keep track of cursor */
 261   3                  OledCursorPos++;
 262   3      
 263   3                  i++;
 264   3      
 265   3                  if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 266   3                  {
 267   4                      oledSendByte(0x00); /* Display the data and keep track of cursor */
 268   4                      OledCursorPos++;
 269   4                      break;
 270   4                  }
 271   3              }
 272   2          }
 273   1      }
 274          
 275          
 276          
 277          
 278          
 279          
 280          /***************************************************************************************************
 281                                 void OLED_DisplayString(char *ptr_stringPointer_u8)
 282           ****************************************************************************************************
 283           * I/P Arguments: String(Address of the string) to be displayed.
 284           * Return value    : none
 285          
 286           * description  :
 287                         This function is used to display the ASCII string on the lcd.
 288                           1.The ptr_stringPointer_u8 points to the first char of the string
 289                              and traverses till the end(NULL CHAR)and displays a char each time.
 290          
 291           ****************************************************************************************************/
 292          void OLED_DisplayString(char *ptr)
 293          {
 294   1          while(*ptr)
 295   1              OLED_DisplayChar(*ptr++);
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 6   

 296   1      }
 297          
 298          /***************************************************************************************************
 299                         void OLED_ScrollMessage(int v_lineNumber_u8, char *ptr_msgPointer_u8)
 300           ****************************************************************************************************
 301           * I/P Arguments:
 302                            int  : Line number on which the message has to be scrolled
 303                            char *: pointer to the string to be scrolled
 304          
 305           * Return value    : none
 306          
 307           * description  :This function scrolls the given message on the specified line.
 308                           If the specified line number is out of range then the message
 309                           will be scrolled on first line
 310           ****************************************************************************************************/
 311          #if (Enable_OLED_ScrollMessage == 1)
              void OLED_ScrollMessage(int lineNum, char *strptr)
              {
                  unsigned char i,j,k,l,cursor,ch;
              
                  if(lineNum > 7)
                      lineNum = 0; // Select first line if the lineNumberToStartDisplay is out of range
              
                  for(i=0;strptr[i];i++)
                  {
                      /* Loop to display the complete string,    each time 16 chars are displayed and
                      pointer is incremented to point to next char */
              
                      for(k=0;k<6;k++)
                      {
                          OLED_SetCursor(lineNum,6-k);     //Move the Cursor to first line
                          cursor = 6-k;
              
                          for(j=0;(strptr[i+j] && (cursor<128));j++)
                          {
                              ch = strptr[i+j]-0x20;
                              for(l=0;(l<5) && (cursor<128);l++)//Display first 16 Chars or till Null char is reached
                              {
                                  oledSendByte(OledFontTable[ch][l]);
                                  cursor++;
                              }
              
                              oledSendByte(0);
                              DELAY_us(10);
                              cursor++;
                          }
                          DELAY_ms(20);
                      }
                  }
              }
              #endif
 347          
 348          
 349          
 350          
 351          
 352          /***************************************************************************************************
 353          void OLED_DisplayNumber(int v_numericSystem_u8, int v_number_u32, int v_numOfDigitsToDisplay_u8)
 354           ****************************************************************************************************
 355           * Function name:  OLED_DisplayNumber()
 356           * I/P Arguments:
 357                            int :  specifies type of number C_BINARY_U8(2),C_DECIMAL_U8(10), C_HEX_U8(16)
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 7   

 358                            int: Number to be displayed on the LCD.
 359                            int : Number of digits to be displayed
 360          
 361           * Return value    : none
 362          
 363           * description  :This function is used to display a max of 10digit decimal/Hex number OR specified
 364                           number of bits for binary number.
 365          
 366                          1st parameter specifies type of number C_BINARY_U8(2),C_DECIMAL_U8(10), C_HEX_U8(16)
 367                          3rd parameter specifies the number of digits from the right side to be displayed
 368                           The output for the input combinations is as below
 369          
 370              Binary:     1.(2,10,4) then 4-LSB will be displayed ie. 1010
 371                          2.(C_BINARY_U8,10,8) then 8-LSB will be displayed ie. 00001010
 372                          3.(C_BINARY_U8,10,2) then 2-LSB will be displayed ie. 10
 373          
 374              Decimal:    4.(10,12345,4) then 4-digits ie. 2345 will be displayed
 375                          5.(C_DECIMAL_U8,12345,6) then 6-digits ie. 012345 will be displayed
 376                          6.(10,12345,C_DisplayDefaultDigits_U8) then 12345 will be displayed.\
 377          
 378              Hex:        7.(16,0x12AB,3) then 3-digits ie. 2AB will be displayed
 379                          8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 380                          9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 381           ****************************************************************************************************/
 382          #if ((Enable_OLED_DisplayNumber == 1) || (Enable_OLED_DisplayFloatNumber == 1) || (Enable_OLED_Printf==1))
              void OLED_DisplayNumber(int v_numericSystem_u8, int v_number_u32, int v_numOfDigitsToDisplay_u8)
              {
                  int i=0,a[10];
              
                  if(C_BINARY_U8 == v_numericSystem_u8)
                  {
                      while(v_numOfDigitsToDisplay_u8!=0)
                      {
                          /* Start Extracting the bits from the specified bit positions.
                        Get the Acsii values of the bits and display */
                          i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
                          OLED_DisplayChar(util_Dec2Ascii(i));
                          v_numOfDigitsToDisplay_u8--;
                      }
                  }
                  else if(v_number_u32==0)
                  {
                      /* If the number is zero then update the array with the same for displaying */
                      for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
                          OLED_DisplayChar('0');
                  }
                  else
                  {
                      for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
                      {
                          /* Continue extracting the digits from right side
                             till the Specified v_numOfDigitsToDisplay_u8 */
                          if(v_number_u32!=0)
                          {
                              /* Extract the digits from the number till it becomes zero.
                              First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
              
                              example for Decimal number:
                              If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                              The process continues till it becomes zero or max digits reached*/
                              a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
                              v_number_u32=v_number_u32/v_numericSystem_u8;
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 8   

                          }
                          else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
                                  (v_numOfDigitsToDisplay_u8 > C_MaxDigitsToDisplay_U8))
                          {
                              /* Stop the iteration if the Max number of digits are reached or
                               the user expects exact(Default) digits in the number to be displayed */
                              break;
                          }
                          else
                          {
                              /* In case user expects more digits to be displayed than the actual digits in number,
                                then update the remaining digits with zero.
                             Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                              a[i]=0;
                          }
                      }
              
                      while(i!=0)
                      {
                          /* Finally get the ascii values of the digits and display*/
                          OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
                          i--;
                      }
                  }
              }
              #endif
 446          
 447          
 448          /*************************************************************************************************
 449                      void  OLED_DisplayFloatNumber(float v_floatNum_f32)
 450           **************************************************************************************************
 451           * Function name:  OLED_DisplayFloatNumber()
 452           * I/P Arguments: float: float Number to be displayed on the LCD.
 453          
 454           * Return value    : none
 455          
 456           * description  :This function is used to display a floating point number
 457                           It supports 6digits of precision.
 458          
 459              Note: Float will be disabled by default as it takes huge controller resources
 460                   It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 461           ***************************************************************************************************/
 462          #if (Enable_OLED_DisplayFloatNumber == 1)
              void OLED_DisplayFloatNumber(float v_floatNum_f32)
              {
                  int v_temp_u32;
                  /* Dirty hack to support the floating point by extracting the integer and fractional part.
                    1.Type cast the number to int to get the integer part.
                    2.Display the extracted integer part followed by a decimal point(.)
                    3.Later the integer part is made zero by subtracting with the extracted integer value.
                    4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
              
                  v_temp_u32 = (int) v_floatNum_f32;
                  OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
              
                  OLED_DisplayChar('.');
              
                  v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
                  v_temp_u32 = v_floatNum_f32 * 1000;
                  OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
              }
              #endif
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 9   

 482          
 483          
 484          
 485          
 486          
 487          
 488          /*************************************************************************************************
 489                      void OLED_Printf(const char *argList, ...)
 490           **************************************************************************************************
 491           * Function name:  OLED_Printf()
 492           * I/P Arguments: variable length arguments similar to printf
 493          
 494           * Return value    : none
 495          
 496           * description  :This function is similar to printf function in C.
 497                           It takes the arguments with specified format and prints accordingly
 498                           The supported format specifiers are as below.
 499                           1. %c: character
 500                           2. %d: signed 16-bit number
 501                           3. %D: signed 32-bit number
 502                           4. %u: unsigned 16-bit number
 503                           5. %U: unsigned 32-bit number
 504                           6. %b: 16-bit binary number
 505                           7. %B: 32-bit binary number
 506                           8. %f: Float number
 507                           9. %x: 16-bit hexadecimal number
 508                           10. %X: 32-bit hexadecimal number
 509                           11. %s: String
 510          
 511          
 512          
 513            Extra feature is available to specify the number of digits to be displayed using printf.
 514               ex: %4d: will display the lower four digits of the decimal number.
 515                   %12b: will display the 12-LSB of the number
 516                   %d: Will display the exact digits of the number
 517          
 518          #####: In case of printing the 8-bit variables, it is recommended to type cast and promote them to uint16_
             -t.
 519                  int v_Num_u8;
 520                  OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 521           **************************************************************************************************/
 522          #if ( Enable_OLED_Printf == 1 )
              void OLED_Printf(const char *argList, ...)
              {
                  const char *ptr;
                  va_list argp;
                  sint16_t v_num_s16;
                  sint32_t v_num_s32;
                  uint16_t v_num_u16;
                  int v_num_u32;
                  char *str;
                  char  ch;
                  int v_numOfDigitsToDisp_u8;
              #if (Enable_OLED_DisplayFloatNumber == 1)
                  float v_floatNum_f32;
              #endif
              
                  va_start(argp, argList);
              
                  /* Loop through the list to extract all the input arguments */
                  for(ptr = argList; *ptr != '\0'; ptr++)
                  {
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 10  

              
                      ch= *ptr;
                      if(ch == '%')         /*Check for '%' as there will be format specifier after it */
                      {
                          ptr++;
                          ch = *ptr;
                          if((ch>=0x30) && (ch<=0x39))
                          {
                              v_numOfDigitsToDisp_u8 = 0;
                              while((ch>=0x30) && (ch<=0x39))
                              {
                                  v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
                                  ptr++;
                                  ch = *ptr;
                              }
                          }
                          else
                          {
                              v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
                          }
              
              
                          switch(ch)       /* Decode the type of the argument */
                          {
                          case 'C':
                          case 'c':     /* Argument type is of char, hence read char data from the argp */
                              ch = va_arg(argp, int);
                              OLED_DisplayChar(ch);
                              break;
              
                          case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                              v_num_s16 = va_arg(argp, int);
                              if(v_num_s16<0)
                              { /* If the number is -ve then display the 2's complement along with '-' sign */
                                  v_num_s16 = -v_num_s16;
                                  OLED_DisplayChar('-');
                              }
                              OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                              v_num_s32 = va_arg(argp, sint32_t);
                              if(v_num_s32<0)
                              { /* If the number is -ve then display the 2's complement along with '-' sign */
                                  v_num_s32 = -v_num_s32;
                                  OLED_DisplayChar('-');
                              }
                              OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                              v_num_u16 = va_arg(argp, int);
                              OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                              v_num_u32 = va_arg(argp, int);
                              OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                              v_num_u16 = va_arg(argp, int);
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 11  

                              OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                              v_num_u32 = va_arg(argp, int);
                              OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                              break;
              
              
                          case 'b':  /* Argument type is of binary,Read int and convert to binary */
                              v_num_u16 = va_arg(argp, int);
                              if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                                  v_numOfDigitsToDisp_u8 = 16;
                              OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                              break;
              
                          case 'B':  /* Argument type is of binary,Read int and convert to binary */
                              v_num_u32 = va_arg(argp, int);
                              if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                                  v_numOfDigitsToDisp_u8 = 16;
                              OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                              break;
              
              
                          case 'F':
                          case 'f': /* Argument type is of float, hence read float data from the argp */
              #if (Enable_OLED_DisplayFloatNumber == 1)
                              v_floatNum_f32 = va_arg(argp, float);
                              OLED_DisplayFloatNumber(v_floatNum_f32);
              #endif
                              break;
              
              
                          case 'S':
                          case 's': /* Argument type is of string, hence get the pointer to sting passed */
                              str = va_arg(argp, char *);
                              OLED_DisplayString(str);
                              break;
              
                          case '%':
                              OLED_DisplayChar('%');
                              break;
                          }
                      }
                      else
                      {
                          /* As '%' is not detected display/transmit the char passed */
                          OLED_DisplayChar(ch);
                      }
                  }
              
                  va_end(argp);
              }
              #endif
 659          
 660          
 661          
 662          
 663          
 664          
 665          /***************************************************************************************************
 666                                   void OLED_Clear()
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 12  

 667           ****************************************************************************************************
 668           * I/P Arguments: none.
 669           * Return value    : none
 670          
 671           * description  :This function clears the LCD and moves the cursor to beginning of first line
 672           ****************************************************************************************************/
 673          void OLED_Clear()
 674          {
 675   1          int i;
 676   1      
 677   1          oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 678   1          oledSendCommand(0);
 679   1          oledSendCommand(127);
 680   1      
 681   1          oledSendCommand(SSD1306_SET_PAGE_ADDR);
 682   1          oledSendCommand(0);
 683   1          oledSendCommand(7);
 684   1      
 685   1      
 686   1          oledSendStart(SSD1306_ADDRESS<<1);
 687   1          oledSendByte(SSD1306_DATA_CONTINUE);
 688   1      
 689   1          for (i=0; i<1024; i++)      // Write Zeros to clear the display
 690   1          {
 691   2              oledSendByte(0);
 692   2          }
 693   1      
 694   1          oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 695   1          oledSendCommand(0);
 696   1          oledSendCommand(127);
 697   1      
 698   1          oledSendCommand(SSD1306_SET_PAGE_ADDR);
 699   1          oledSendCommand(0);
 700   1          oledSendCommand(7);   
 701   1      
 702   1          oledSendStart(SSD1306_ADDRESS<<1);
 703   1          oledSendByte(SSD1306_DATA_CONTINUE);
 704   1      }
 705          
 706          
 707          
 708          
 709          
 710          /***************************************************************************************************
 711                                   void OLED_GoToLine(int v_lineNumber_u8)
 712           ****************************************************************************************************
 713           * I/P Arguments: int: Line number(0-7).
 714           * Return value    : none
 715          
 716           * description  :This function moves the Cursor to beginning of the specified line.
 717                  If the requested line number is out of range, it will not move the cursor.
 718          
 719           Note: The line numbers run from 0 to 7
 720           ****************************************************************************************************/
 721          #if (Enable_OLED_GoToLine == 1)
              void  OLED_GoToLine(int lineNumber)
              {
                  if(lineNumber<8)
                  {   /* If the line number is within range
                       then move it to specified line and keep track*/
                      OledLineNum = lineNumber;
                      OLED_SetCursor(OledLineNum,0);
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 13  

                  }
              }
              #endif
 732          
 733          
 734          
 735          
 736          
 737          
 738          /***************************************************************************************************
 739                                   void  OLED_GoToNextLine()
 740           ****************************************************************************************************
 741           * I/P Arguments: none
 742           * Return value    : none
 743          
 744           * description  :This function moves the Cursor to beginning of the next line.
 745                  If the cursor is on last line and NextLine command is issued then
 746                  it will move the cursor to first line.
 747           ****************************************************************************************************/
 748          void  OLED_GoToNextLine()
 749          {
 750   1          /*Increment the current line number.
 751   1            In case it exceeds the limit, rool it back to first line */
 752   1          OledLineNum++;
 753   1          OledLineNum = OledLineNum&0x07;
 754   1          OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
 755   1      }
 756          
 757          
 758          
 759          
 760          
 761          
 762          
 763          /***************************************************************************************************
 764                          void OLED_SetCursor(char v_lineNumber_u8,char v_charNumber_u8)
 765           ****************************************************************************************************
 766           * I/P Arguments: char row,char col
 767                           row -> line number(line1=1, line2=2),
 768                                  For 2line LCD the I/P argument should be either 1 or 2.
 769                           col -> char number.
 770                                  For 16-char LCD the I/P argument should be between 0-15.
 771           * Return value    : none
 772          
 773           * description  :This function moves the Cursor to specified position
 774          
 775                             Note:If the Input(Line/Char number) are out of range
 776                                  then no action will be taken
 777           ****************************************************************************************************/
 778          void OLED_SetCursor(int lineNumber,int cursorPosition)
 779          {
 780   1          /* Move the Cursor to specified position only if it is in range */
 781   1          if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 782   1          {
 783   2              OledLineNum=lineNumber;       /* Save the specified line number */
 784   2              OledCursorPos=cursorPosition; /* Save the specified cursor position */
 785   2      
 786   2              oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 787   2              oledSendCommand(cursorPosition);
 788   2              oledSendCommand(127);
 789   2      
 790   2              oledSendCommand(SSD1306_SET_PAGE_ADDR);
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 14  

 791   2              oledSendCommand(lineNumber);
 792   2              oledSendCommand(7);
 793   2      
 794   2              oledSendStart(SSD1306_ADDRESS<<1);
 795   2              oledSendByte(SSD1306_DATA_CONTINUE);
 796   2          }
 797   1      }
 798          
 799          
 800          
 801          
 802          /***************************************************************************************************
 803                                 void OLED_DisplayLogo(char *ptr_Logo)
 804           ****************************************************************************************************
 805           * I/P Arguments   : Array Bit Map(Address of Bit Map) to be displayed.
 806           * Return value    : none
 807          
 808           * description  :
 809                         This function is used to display the logo for using the bit map.
 810                         User should pass the array/address of bitmap for diplay the logo.
 811                         User can enable/disable the inversion of the dislpay by using the below functions.
 812                         OLED_EnableInversion/OLED_DisableInversion
 813           ****************************************************************************************************/
 814          #if (Enable_OLED_DisplayLogo == 1)
 815          void OLED_DisplayLogo(char *ptr_Logo)
 816          {
 817   1          int i;
 818   1      
 819   1          OLED_SetCursor(0,0);
 820   1      
 821   1          oledSendStart(SSD1306_ADDRESS<<1);
 822   1          oledSendByte(SSD1306_DATA_CONTINUE);
 823   1      
 824   1          for ( i=0; i<1024; i++)      // Send data
 825   1          {
 826   2              oledSendByte(ptr_Logo[i]);
 827   2          }
 828   1      }
 829          #endif
 830          
 831          
 832          
 833          
 834          
 835          /***************************************************************************************************
 836          void OLED_VerticalGraph(int barGraphNumber, int percentageValue)
 837           ****************************************************************************************************
 838           * I/P Arguments   : barGraphNumber : position of bar ( 0 to 3 )
 839                               percentageValue : value of the bar in percentage(0-100)
 840           * Return value    : none
 841          
 842           * description  :
 843                          This function displays bar graph in horizontal direction.
 844           ****************************************************************************************************/
 845          #if (ENABLE_OLED_VerticalGraph ==1)
              void OLED_VerticalGraph(int barGraphNumber, int percentageValue)
              {
                  int lineNumberToStartDisplay,i,j,barGraphPosition;
                  int lineNumber,valueToDisplay;
              
              
                  if((barGraphNumber < C_MaxBarGraphs_U8) && (percentageValue<=100))
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 15  

                  {
                      barGraphPosition = barGraphNumber * 32;
              
                      OLED_SetCursor(0,barGraphPosition+8);
                      OLED_DisplayNumber(E_DECIMAL,percentageValue,3);
              
              
                      /* Divide the value by 8, as we have 8-pixels for each line */
                      percentageValue = percentageValue/2;
                      lineNumberToStartDisplay = (percentageValue>>3);
                      lineNumber = 7-lineNumberToStartDisplay;
              
              
                      for(i=1;i<8;i++)
                      {
                          OLED_SetCursor(i,(barGraphPosition+12));
                          if(i<lineNumber)
                          {
                              valueToDisplay = 0x00;
                          }
                          else if(i== lineNumber)
                          {
                              valueToDisplay = util_GetMod8(percentageValue,8);
                              valueToDisplay = (0xff<<(8-valueToDisplay));
                          }
                          else
                          {
                              valueToDisplay = 0xff;
                          }
              
                          for(j=0;j<12;j++)
                          {
                              oledSendByte(valueToDisplay);
                          }
                      }
                  }
              }
              #endif
 891          
 892          
 893          
 894          
 895          /***************************************************************************************************
 896              void OLED_DisplayHorizontalGraph(int barGraphNumber, int percentageValue)
 897           ****************************************************************************************************
 898           * I/P Arguments   : barGraphNumber : position of bar ( 0 to 3 )
 899                               percentageValue : value of the bar in percentage(0-100)
 900           * Return value    : none
 901          
 902           * description  :
 903                          This function displays bar graph in vertical direction.
 904           ****************************************************************************************************/
 905          #if (ENABLE_OLED_HorizontalGraph ==1)
              void OLED_HorizontalGraph(int barGraphNumber, int percentageValue)
              {
                  int lineNumberToStartDisplay,i;
                  lineNumberToStartDisplay = (barGraphNumber * 2)+1;
              
                  if((barGraphNumber < C_MaxBarGraphs_U8) && (percentageValue<=100))
                  {
                      OLED_SetCursor(lineNumberToStartDisplay,0);
              
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 16  

                      for(i=0;i<percentageValue;i++)
                      {
                          oledSendByte(0xff);
                      }
              
                      for(i=percentageValue;i<100;i++)
                      {
                          oledSendByte(0x00);
                      }
              
                      OLED_SetCursor(lineNumberToStartDisplay,105);
              
                      OLED_DisplayNumber(E_DECIMAL,percentageValue,3);
                  }
              }
              #endif
 931          
 932          
 933          
 934          
 935          /***************************************************************************************************
 936                                 void OLED_EnableInversion(void)
 937           ****************************************************************************************************
 938           * I/P Arguments   : none.
 939           * Return value    : none
 940          
 941           * description  :
 942                         This function is used to Enable the display inversion.
 943                         Once this is enabled the background pixels will be turned ON and char pixels will be OFF.
 944          
 945           ****************************************************************************************************/
 946          #if (Enable_OLED_EnableInversion == 1)
              void OLED_EnableInversion(void)
              {
                  oledSendCommand(SSD1306_INVERT_DISPLAY);
              }
              #endif
 952          
 953          
 954          
 955          
 956          
 957          
 958          
 959          /***************************************************************************************************
 960                                 void OLED_DisableInversion(void)
 961           ****************************************************************************************************
 962           * I/P Arguments   : none.
 963           * Return value    : none
 964          
 965           * description  :
 966                         This function is used to clear the display inversion.
 967          
 968           ****************************************************************************************************/
 969          #if (Enable_OLED_DisableInversion == 1)
              void OLED_DisableInversion(void)
              {
                  oledSendCommand(SSD1306_NORMAL_DISPLAY);
              }
              #endif
 975          
 976          
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 17  

 977          
 978          
 979          
 980          
 981          /***************************************************************************************************
 982                                 void OLED_SetBrightness(int brightnessValue)
 983           ****************************************************************************************************
 984           * I/P Arguments   : int: brightness level from 0-255.
 985           * Return value    : none
 986          
 987           * description  :
 988                         This function is used to adjust the contrast/Brightness of the OLED.
 989          
 990           ****************************************************************************************************/
 991          #if (Enable_OLED_SetBrightness == 1)
              void OLED_SetBrightness(int brightnessValue)
              {
                  oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
                  oledSendCommand(brightnessValue);
              }
              #endif
 998          
 999          
1000          
1001          
1002          
1003          
1004          /********************************************************************************
1005                          Local FUnctions for sending the command/data
1006           ********************************************************************************/
1007          
1008          void oledSendStart(int address)
1009          {
1010   1          SDA_PIN = 0;
1011   1          SDA_PIN = 1;
1012   1          SCL_PIN = 1;
1013   1          SDA_PIN = 0;
1014   1          SCL_PIN = 0;
1015   1          oledSendByte(address);
1016   1      }
1017          
1018          
1019          void oledSendStop()
1020          {
1021   1          SDA_PIN = 0;
1022   1          SCL_PIN = 1;
1023   1          SDA_PIN = 0;  
1024   1          SDA_PIN = 1;
1025   1      }
1026          
1027          
1028          void oledWaitForAck()
1029          {
1030   1          SDA_PIN = 1; //Configure SDA_PIN as Input to read the ACK                //delay_us(1);
1031   1          SCL_PIN = 1;
1032   1          while(SDA_PIN==1);
1033   1          SCL_PIN = 0;
1034   1      }
1035          
1036          
1037          void oledSendByte(int ch)
1038          {
C51 COMPILER V9.60.0.0   OLED_I2C                                                          02/22/2021 17:13:50 PAGE 18  

1039   1          char i;    
1040   1      
1041   1          SCL_PIN = 0;
1042   1          for ( i = 7; i>=0; i--)
1043   1          {
1044   2              SDA_PIN = (ch >> (i)) & 0x1; 
1045   2              SCL_PIN = 1; 
1046   2              SCL_PIN = 0;  
1047   2          }
1048   1      
1049   1          oledWaitForAck();
1050   1      }
1051          
1052          
1053          void oledSendCommand(int cmd)
1054          {
1055   1          oledSendStart(SSD1306_ADDRESS<<1);
1056   1          oledSendByte(SSD1306_COMMAND);
1057   1          oledSendByte(cmd);
1058   1          oledSendStop();
1059   1      }
1060          
1061          /*****************************************************************************************************/
1062          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    770    ----
   CONSTANT SIZE    =    950    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
